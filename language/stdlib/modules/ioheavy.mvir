module IOheavy {
    import 0x0.Vector;
    resource Data {
        values: Vector.T<bytearray>
    }
    public initData(size: u64) {
        let data: Vector.T<bytearray>;
        let counter: u64;
        counter = 0;
        data = Vector.empty<bytearray>();
        while (copy(counter) < copy(size)) {
        Vector.push_back<bytearray>(&mut data, h"00");
            counter = copy(counter) + 1;
        }
        move_to_sender<Data>(Data { values: move(data)});
        return;
    }

    public rwData(size: u64) acquires Data {
        let Data_ref: &mut Self.Data;
        let vec_ref: &mut Vector.T<bytearray>;
        let counter: u64;
	let read: bytearray;
        counter = 0;
        Data_ref = borrow_global_mut<Data>(get_txn_sender());
        vec_ref = &mut copy(Data_ref).values;
        while (copy(counter) < copy(size)) {
            *Vector.borrow_mut<bytearray>(copy(vec_ref), copy(counter)) =  h"00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff";
            counter = copy(counter) + 1;
        }
        counter = 0;
        while (copy(counter) < copy(size)) {
            read = *Vector.borrow_mut<bytearray>(copy(vec_ref), copy(counter)) ;
	    counter = copy(counter) + 1;
        }
        counter = copy(size);
        while (copy(counter) >= 1) {
            read = *Vector.borrow_mut<bytearray>(copy(vec_ref), copy(counter) - 1);
	    counter = copy(counter) - 1;
        }
	return;
    }
}
